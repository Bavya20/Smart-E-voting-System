"""
Django settings for SmartVoting project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import json
from pathlib import Path
from web3 import Web3
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# =============================
# ✅ BASE DIRECTORY CONFIGURATION
# =============================
BASE_DIR = Path(__file__).resolve().parent.parent

# =============================
# ✅ SECURITY SETTINGS
# =============================
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "your-secret-key")  # Use a secure key from .env
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"
ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")
#DEBUG = False
#ALLOWED_HOSTS = ['your-domain.com', 'localhost', '127.0.0.1']

# =============================
# ✅ ETHEREUM BLOCKCHAIN SETUP
# =============================
WEB3_PROVIDER = os.getenv("WEB3_PROVIDER", "http://127.0.0.1:7545")  # Default to Ganache local blockchain
w3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER))

contract = None  # Default contract to None to avoid errors
try:
    contract_path = BASE_DIR / "contract_data.json"
    with open(contract_path, "r") as f:
        contract_data = json.load(f)
    contract = w3.eth.contract(address=contract_data.get("address"), abi=contract_data.get("abi"))
except (FileNotFoundError, json.JSONDecodeError):
    print("⚠️ Warning: 'contract_data.json' is missing or corrupted. Smart contract not loaded.")

# =============================
# ✅ INSTALLED APPS
# =============================
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
#    'voting.apps.VotingConfig',
    'voting',  # Voting app
    'rest_framework',  # Optional: Enable API support
]

# =============================
# ✅ MIDDLEWARE CONFIGURATION
# =============================
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# =============================
# ✅ TEMPLATES CONFIGURATION (Required for Django Admin)
# =============================
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Ensures Django can find your templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# =============================
# ✅ URL & WSGI CONFIGURATION
# =============================
ROOT_URLCONF = 'SmartVoting.urls'
WSGI_APPLICATION = 'SmartVoting.wsgi.application'

# =============================
# ✅ DATABASE CONFIGURATION (SQLite for Dev, PostgreSQL for Production)
# =============================
USE_POSTGRESQL = os.getenv("USE_POSTGRESQL", "False").lower() == "true"

if USE_POSTGRESQL:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv("DB_NAME", "smartvoting"),
            'USER': os.getenv("DB_USER", "postgres"),
            'PASSWORD': os.getenv("DB_PASSWORD", "password"),
            'HOST': os.getenv("DB_HOST", "localhost"),
            'PORT': os.getenv("DB_PORT", "5432"),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / "db.sqlite3",
        }
    }

# =============================
# ✅ AUTHENTICATION SETTINGS
# =============================
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# =============================
# ✅ INTERNATIONALIZATION & TIMEZONE
# =============================
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Kolkata'  # Adjust based on your region
USE_I18N = True
USE_L10N = True
USE_TZ = True

# =============================
# ✅ STATIC & MEDIA FILES (Fix Missing Directory Warning)
# =============================
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"
#STATIC_URL = '/static/'
#STATIC_ROOT = 'path_to_your_static_files'
#STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Ensure the static folder exists
if not os.path.exists(STATICFILES_DIRS[0]):
    os.makedirs(STATICFILES_DIRS[0])

# =============================
# ✅ DEFAULT PRIMARY KEY FIELD
# =============================
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

INSTALLED_APPS += ["corsheaders"]
MIDDLEWARE += ["corsheaders.middleware.CorsMiddleware"]
CORS_ALLOW_ALL_ORIGINS = True
